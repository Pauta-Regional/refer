head	1.6;
access;
symbols;
locks; strict;
comment	@# @;


1.6
date	2012.04.12.17.33.21;	author ghost;	state Exp;
branches;
next	1.5;

1.5
date	2012.04.11.17.32.55;	author ghost;	state Exp;
branches;
next	1.4;

1.4
date	2011.09.20.02.45.42;	author ghost;	state Exp;
branches;
next	1.3;

1.3
date	2010.03.25.02.11.18;	author ghost;	state Exp;
branches;
next	1.2;

1.2
date	2010.02.24.20.39.00;	author ghost;	state Exp;
branches;
next	1.1;

1.1
date	2010.02.24.20.37.42;	author ghost;	state Exp;
branches;
next	;


desc
@foo_attach_alloc.c
@


1.6
log
@Add license.
@
text
@/* $Id: foo_attach_alloc.c,v 1.5 2012/04/11 17:32:55 ghost Exp $ */

/*-
 * Copyright (c) 2012 Joseph Kong.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the author nor the names of any co-contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

static int
foo_attach(device_t dev)
{
	struct foo_softc *sc = device_get_softc(dev);
	int size = BAZ_SIZE;
	int error;

	if (bus_dma_tag_create(bus_get_dma_tag(dev),	/* parent	*/
			       1,			/* alignment	*/
			       0,			/* boundary	*/
			       BUS_SPACE_MAXADDR,	/* lowaddr	*/
			       BUS_SPACE_MAXADDR,	/* highaddr	*/
			       NULL,			/* filter	*/
			       NULL,			/* filterarg	*/
			       BUS_SPACE_MAXSIZE_32BIT,	/* maxsize	*/
			       BUS_SPACE_UNRESTRICTED,	/* nsegments	*/
			       BUS_SPACE_MAXSIZE_32BIT,	/* maxsegsize	*/
			       0,			/* flags	*/
			       NULL,			/* lockfunc	*/
			       NULL,			/* lockfuncarg	*/
			       &sc->foo_parent_dma_tag)) {
		device_printf(dev, "Cannot allocate parent DMA tag!\n");
		return (ENOMEM);
	}

	if (bus_dma_tag_create(sc->foo_parent_dma_tag,	/* parent	*/
			       64,			/* alignment	*/
			       0,			/* boundary	*/
			       BUS_SPACE_MAXADDR_32BIT,	/* lowaddr	*/
			       BUS_SPACE_MAXADDR,	/* highaddr	*/
			       NULL,			/* filter	*/
			       NULL,			/* filterarg	*/
			       size,			/* maxsize	*/
			       1,			/* nsegments	*/
			       size,			/* maxsegsize	*/
			       0,			/* flags	*/
			       NULL,			/* lockfunc	*/
			       NULL,			/* lockfuncarg	*/
			       &sc->foo_baz_dma_tag)) {
		device_printf(dev, "Cannot allocate baz DMA tag!\n");
		return (ENOMEM);
	}

	if (bus_dmamem_alloc(sc->foo_baz_dma_tag,	/* DMA tag	*/
			     (void **)&sc->foo_baz_buf,	/* vaddr	*/
			     BUS_DMA_NOWAIT | BUS_DMA_ZERO, /* flags	*/
			     &sc->foo_baz_dma_map)) {
		device_printf(dev, "Cannot allocate baz DMA memory!\n");
		return (ENOMEM);
	}

	error = bus_dmamap_load(sc->foo_baz_dma_tag,	/* DMA tag	*/
				sc->foo_baz_dma_map,	/* DMA map	*/
				sc->foo_baz_buf,	/* buffer	*/
				size,			/* buffersize	*/
				foo_callback,		/* callback	*/
				&sc->foo_baz_busaddr,	/* callbackarg	*/
				BUS_DMA_NOWAIT);	/* flags	*/
	if (error || sc->foo_baz_busaddr == 0) {
		device_printf(dev, "Cannot map baz DMA memory!\n");
		return (ENOMEM);
	}

...
}
@


1.5
log
@Remove bzero(sc, sizeof(*sc)); it's redundant.
Use BUS_DMA_ZERO instead of bzero(sc->foo_baz_buf, size).
@
text
@d1 30
a30 1
/* $Id: foo_attach_alloc.c,v 1.4 2011/09/20 02:45:42 ghost Exp $ */
@


1.4
log
@Clean up the bus_dmamem_alloc() call.
@
text
@d1 1
a1 1
/* $Id: foo_attach_alloc.c,v 1.3 2010/03/25 02:11:18 ghost Exp $ */
a9 2
	bzero(sc, sizeof(*sc));

d48 1
a48 1
			     BUS_DMA_NOWAIT,		/* flags	*/
a52 2

	bzero(sc->foo_baz_buf, size);
@


1.3
log
@Use bus_get_dma_tag() instead of NULL.
Replace every 'bar' with 'baz.'
@
text
@d1 1
a1 1
/* $Id: foo_attach_alloc.c,v 1.2 2010/02/24 20:39:00 ghost Exp $ */
d48 4
a51 2
	if (bus_dmamem_alloc(sc->foo_baz_dma_tag, (void **)&sc->foo_baz_buf,
	    BUS_DMA_NOWAIT, &sc->foo_baz_dma_map)) {
@


1.2
log
@Add ident string.
@
text
@d1 1
a1 1
/* $Id$ */
d7 1
a7 1
	int size = BAR_SIZE;
d12 1
a12 1
	if (bus_dma_tag_create(NULL,			/* parent	*/
d43 2
a44 2
			       &sc->foo_bar_dma_tag)) {
		device_printf(dev, "Cannot allocate bar DMA tag!\n");
d48 3
a50 3
	if (bus_dmamem_alloc(sc->foo_bar_dma_tag, (void **)&sc->foo_bar_buf,
	    BUS_DMA_NOWAIT, &sc->foo_bar_dma_map)) {
		device_printf(dev, "Cannot allocate bar DMA memory!\n");
d54 1
a54 1
	bzero(sc->foo_bar_buf, size);
d56 3
a58 3
	error = bus_dmamap_load(sc->foo_bar_dma_tag,	/* DMA tag	*/
				sc->foo_bar_dma_map,	/* DMA map	*/
				sc->foo_bar_buf,	/* buffer	*/
d61 1
a61 1
				&sc->foo_bar_busaddr,	/* callbackarg	*/
d63 2
a64 2
	if (error || sc->foo_bar_busaddr == 0) {
		device_printf(dev, "Cannot map bar DMA memory!\n");
@


1.1
log
@Initial revision
@
text
@d1 2
@
